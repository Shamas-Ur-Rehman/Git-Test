[1mdiff --git a/Shamas.go b/Shamas.go[m
[1mnew file mode 100644[m
[1mindex 0000000..1719342[m
[1m--- /dev/null[m
[1m+++ b/Shamas.go[m
[36m@@ -0,0 +1,32 @@[m
[32m+[m[32mpackage main[m
[32m+[m
[32m+[m[32mimport ([m
[32m+[m	[32m"fmt"[m
[32m+[m
[32m+[m	[32m"sort"[m
[32m+[m[32m)[m
[32m+[m
[32m+[m[32mfunc main() {[m
[32m+[m	[32m// Create a slice of integers[m
[32m+[m	[32mvar numbers []int = []int{4, 2, 9, 6,[m
[32m+[m		[32m23, 12, 34, 0, 1}[m
[32m+[m	[32m// Sort the slice in ascending order[m
[32m+[m	[32msort.Ints(numbers)[m
[32m+[m	[32mfmt.Println("Sorted numbers: ", numbers)[m
[32m+[m	[32m// Calculate the median of the sorted slice[m
[32m+[m	[32mmedian := calculateMedian(numbers)[m
[32m+[m	[32mfmt.Printf("Median: %.2f\n", median)[m
[32m+[m[32m}[m
[32m+[m[32mfunc calculateMedian(numbers []int) float64 {[m
[32m+[m	[32mn := len(numbers)[m
[32m+[m	[32mif n%2 == 0 {[m
[32m+[m		[32m// If the length of the slice is even, the median is the average of the two[m
[32m+[m		[32m// middle numbers[m
[32m+[m		[32mmiddle1 := numbers[n/2-1][m
[32m+[m		[32mmiddle2 := numbers[n/2][m
[32m+[m		[32mreturn float64(middle1+middle2) / 2[m
[32m+[m	[32m} else {[m
[32m+[m		[32m// If the length of the slice is odd, the median is the middle number[m
[32m+[m		[32mreturn float64(numbers[n/2])[m
[32m+[m	[32m}[m
[32m+[m[32m}[m
